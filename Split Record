       IDENTIFICATION DIVISION.
       PROGRAM-ID. HEXSPLIT20K.
      *
      * This program reads a file with large records (20,000 bytes)
      * and splits the data into new output records when it finds
      * the hexadecimal string X'020202'.
      *
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INPUT-FILE  ASSIGN TO "INPUT.DAT"
                              ORGANIZATION IS SEQUENTIAL
                              ACCESS MODE IS SEQUENTIAL.

           SELECT OUTPUT-FILE ASSIGN TO "OUTPUT.DAT"
                              ORGANIZATION IS SEQUENTIAL
                              ACCESS MODE IS SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD  INPUT-FILE
           RECORD CONTAINS 20000 CHARACTERS.
       01  INPUT-RECORD            PIC X(20000).

       FD  OUTPUT-FILE
           RECORD CONTAINS 20000 CHARACTERS.
       01  OUTPUT-RECORD           PIC X(20000).

       WORKING-STORAGE SECTION.
       01  WS-SWITCHES.
           05  WS-EOF-SWITCH       PIC X(1) VALUE 'N'.
               88  EOF-REACHED               VALUE 'Y'.

       01  WS-DELIMITERS.
           05  WS-HEX-DELIMITER    PIC X(3) VALUE X'020202'.
           05  WS-HEX-LENGTH       PIC 9(1) VALUE 3.

       01  WS-BUFFERS.
           05  WS-PROCESS-BUFFER   PIC X(40000) VALUE SPACES.
           05  WS-BUFFER-PTR       PIC 9(5) COMP VALUE 1.

       01  WS-TEMP-VARS.
           05  WS-INPUT-DATA       PIC X(20000).
           05  WS-DELIM-POS        PIC 9(5) COMP.
           05  WS-DATA-TO-WRITE    PIC X(20000).

       PROCEDURE DIVISION.
       000-MAIN-LOGIC.
           OPEN INPUT INPUT-FILE
                OUTPUT OUTPUT-FILE.

           PERFORM 100-READ-INPUT-FILE.

           PERFORM 200-PROCESS-FILE
               UNTIL EOF-REACHED.
      *
      * Write any remaining data in the buffer after the loop finishes.
      *
           IF WS-BUFFER-PTR > 1
               MOVE WS-PROCESS-BUFFER(1:WS-BUFFER-PTR - 1)
                   TO OUTPUT-RECORD(1:WS-BUFFER-PTR - 1)
               WRITE OUTPUT-RECORD
           END-IF.

           PERFORM 300-CLOSE-FILES.

           STOP RUN.

       100-READ-INPUT-FILE.
           READ INPUT-FILE INTO WS-INPUT-DATA
               AT END
                   MOVE 'Y' TO WS-EOF-SWITCH
           END-READ.

       200-PROCESS-FILE.
      * Append the new input record to the end of the processing buffer.
           STRING WS-PROCESS-BUFFER(1:WS-BUFFER-PTR - 1)
                  WS-INPUT-DATA
                  DELIMITED BY SIZE INTO WS-PROCESS-BUFFER
           END-STRING.

           COMPUTE WS-BUFFER-PTR = WS-BUFFER-PTR + 20000.

           PERFORM 210-SEARCH-FOR-DELIMITER.

           PERFORM 100-READ-INPUT-FILE.

       210-SEARCH-FOR-DELIMITER.
           INSPECT WS-PROCESS-BUFFER
               TALLYING WS-DELIM-POS FOR CHARACTERS BEFORE WS-HEX-DELIMITER.

           IF WS-DELIM-POS < WS-BUFFER-PTR
      *
      * Delimiter found, write the segment to output.
      *
               MOVE WS-PROCESS-BUFFER(1:WS-DELIM-POS)
                   TO WS-DATA-TO-WRITE(1:WS-DELIM-POS)
               WRITE OUTPUT-RECORD FROM WS-DATA-TO-WRITE(1:WS-DELIM-POS)
      *
      * Move remaining data to the start of the buffer.
      *
               MOVE WS-PROCESS-BUFFER(WS-DELIM-POS + WS-HEX-LENGTH:
                   WS-BUFFER-PTR - WS-DELIM-POS - WS-HEX-LENGTH)
                   TO WS-PROCESS-BUFFER
               COMPUTE WS-BUFFER-PTR = WS-BUFFER-PTR - WS-DELIM-POS - WS-HEX-LENGTH
      *
      * Search for more delimiters within the same buffer.
      *
               PERFORM 210-SEARCH-FOR-DELIMITER
           END-IF.

       300-CLOSE-FILES.
           CLOSE INPUT-FILE
                 OUTPUT-FILE.
