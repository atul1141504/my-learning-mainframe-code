       IDENTIFICATION DIVISION.
       PROGRAM-ID. HEXSPLIT.
      *
      * This program reads a file, and when it finds a specific
      * hexadecimal string, it writes a new line to the output file.
      * It continues reading the input file and appending to the
      * same output line until it encounters a different
      * hexadecimal string, at which point it writes the line
      * and starts a new one.
      *
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INPUT-FILE  ASSIGN TO "INPUT.DAT"
                              ORGANIZATION IS SEQUENTIAL
                              ACCESS MODE IS SEQUENTIAL.

           SELECT OUTPUT-FILE ASSIGN TO "OUTPUT.DAT"
                              ORGANIZATION IS SEQUENTIAL
                              ACCESS MODE IS SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD  INPUT-FILE.
       01  INPUT-RECORD            PIC X(80).

       FD  OUTPUT-FILE.
       01  OUTPUT-RECORD           PIC X(255).

       WORKING-STORAGE SECTION.
       01  WS-SWITCHES.
           05  WS-EOF-SWITCH       PIC X(1) VALUE 'N'.
               88  EOF-REACHED               VALUE 'Y'.
           05  WS-RECORD-SWITCH    PIC X(1) VALUE 'N'.
               88  NEW-RECORD-STARTED        VALUE 'Y'.

       01  WS-COUNTERS.
           05  WS-OUT-PTR          PIC S9(4) COMP VALUE 1.

       01  WS-VARIABLES.
           05  WS-INPUT-DATA       PIC X(80).
           05  WS-LINE-BUFFER      PIC X(255) VALUE SPACES.
           05  WS-FIRST-HEX-STRING PIC X(4) VALUE X'F1F2'.
           05  WS-SECOND-HEX-STRING PIC X(4) VALUE X'F3F4'.

       PROCEDURE DIVISION.
       000-MAIN-LOGIC.
           OPEN INPUT INPUT-FILE
                OUTPUT OUTPUT-FILE.

           PERFORM 100-READ-INPUT-FILE.

           PERFORM 200-PROCESS-FILE
               UNTIL EOF-REACHED.

           PERFORM 300-CLOSE-FILES.

           STOP RUN.

       100-READ-INPUT-FILE.
           READ INPUT-FILE INTO WS-INPUT-DATA
               AT END
                   MOVE 'Y' TO WS-EOF-SWITCH
               NOT AT END
                   CONTINUE
           END-READ.

       200-PROCESS-FILE.
      * Look for the first hex string to start a new record.
           IF WS-INPUT-DATA (1:4) = WS-FIRST-HEX-STRING
               IF NEW-RECORD-STARTED
                   PERFORM 220-WRITE-RECORD
               END-IF

               INITIALIZE WS-LINE-BUFFER
               MOVE 1 TO WS-OUT-PTR
               MOVE WS-INPUT-DATA TO WS-LINE-BUFFER
               MOVE 'Y' TO WS-RECORD-SWITCH
           ELSE
      * Append to the current record if it has already started.
               IF NEW-RECORD-STARTED
                   MOVE WS-INPUT-DATA TO WS-LINE-BUFFER(WS-OUT-PTR:80)
                   ADD 80 TO WS-OUT-PTR
               END-IF

               IF WS-INPUT-DATA (1:4) = WS-SECOND-HEX-STRING
                   PERFORM 220-WRITE-RECORD
                   MOVE 'N' TO WS-RECORD-SWITCH
               END-IF
           END-IF.

           PERFORM 100-READ-INPUT-FILE.

       220-WRITE-RECORD.
           MOVE WS-LINE-BUFFER TO OUTPUT-RECORD
           WRITE OUTPUT-RECORD
           INITIALIZE WS-LINE-BUFFER.

       300-CLOSE-FILES.
           CLOSE INPUT-FILE
                 OUTPUT-FILE.